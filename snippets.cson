# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
'.source.js':
  'div':
    'prefix':'div'
    'body':'<div>${1}</div>'
  'ul':
      'prefix':'ul'
      'body':'<ul>${1}</ul>'
  'li':
      'prefix':'li'
      'body':'<li>${1}</li>'
  'h':
    'prefix':'header'
    'body':'<h$1>$2</h$1>'
  'Route':
    'prefix':'Route'
    'body':'<Route path="/$1" component={$1} />'
  'Class component':
    'prefix':'ccom'
    'body':"""
        class $1 extends Component {
          render() {
            return (
              <div>
                <h1>$1 Component</h1>
              </div>
            );
          }
        }
        export default ${1};
      """
  'Dummy component':
    'prefix':'dcom'
    'body':"""
        const $1 = () => {
          return (
                      <div>
                        <h1>$1 Component</h1>
                      </div>
          );
        };
        export default ${1};
      """

